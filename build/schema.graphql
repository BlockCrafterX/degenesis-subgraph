type Contract @entity {
  id: ID!
  totalUSD: BigInt!
  depositsOpen: Boolean!
  withdrawalsOpen: Boolean!
  privateFarmingOpen: Boolean!
  balances: [Balance!]!
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  oracle: Oracle! # Will be '0x0' for Core
  pool: Pool! # Pool transferred to, Genesis for Defi reactor for Core
  total: BigInt!
}

type Oracle @entity {  # Change to have id be oracle address and token address be token entity
  id: ID! # token address
  oracleAddr: Bytes!
}

type Pool @entity {
  id: ID! # pool address
  depositedToken: Token!
  amountDeposited: BigInt!
}

type User @entity {
  id: ID!
  participant: Boolean!
  balances: [Balance!]! 
}

# Keep track of running totals
type Balance @entity {
  id: ID! # user address + token address.  Done like this for core, can change to just user addr for Defi
  address: Bytes! # Address of user or contract (defi or core)
  token: Token!
  total: BigInt!
}

type WhiteList @entity {
  id: ID! # contract addr
  root: Bytes!
  enabled: Boolean!
}

type TransferToTreasury @entity {
  id: ID!
  balances: [Balance!]!
}

type FinalizedAsset @entity {
  id: ID!
  token: [Token!]!
  privateFarming: Boolean! # Genesis for Defi, farming for Core
  amount: BigInt!
}


